function x = SimPolyHedra(N, Bounds, Polyhedra)
% simulate N uniformly-drawn points with bounds of polyhedra

% 1st stage of uniformly drawing >= N points within box of Bounds
% generate N uniformly random vectors of dim D
% I chose 2*N, because I did
points = rand(2*N, size(Bounds, 1));

% transform random numbers to within values determined by Bounds
for i = 1:size(Bounds,1)
    max = Bounds(i, 2);
    min = Bounds(i, 1);
    points(:, i) = (max - min) * points(:, i) + min;
end;

% 2nd stage of filtering (only the first N within the polyhedra)


% try each point
for p = 1:size(points, 1)
    % for each cell
    for M = 1:size(Polyhedra, 1)
        % M of size fi x (d+1)
        
        % check if good - then add and break;
        if 
            out_points = [out_points
            break;
    end;
end;


outpoints = [];
% output N points
while(size(outpoints, 1) < N)
    % 1st stage
    % generate a random point
    cur_point = rand(1, size(Bounds, 1));
    % transform point to within values determined by Bounds
    for i = 1:size(Bounds, 1)
        max = Bounds(i, 2);
        min = Bounds(i, 1);
        cur_point(:, i) = (max - min) * cur_point(:, i) + min;
    end;

    % 2nd stage
    % test to see if point is inside at least one M_i
    for p = 1:size(Polyhedra, 1)
        % check if good, then add and break;
        cur_M = Polyhedra{p};
        
        x = [1; cur_point(:)];
        inside = 1;
        % iterate through faces of M_i
        
        
        if 
            out_points = [out_points; cur_point];
            break;
        end;
    end;


end;
x = out_points;